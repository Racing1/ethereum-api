#!/bin/bash
#
# Geth.sh - Spawn local Geth nodes
# 
# Influenced by: 
#
#     https://github.com/ethersphere/eth-utils
#
# Usage:
#
#     bash ./spawnGetNodes.sh < ROOT_DIR > < COUNT > < [[params]...]
#
# Params:
#
#     COUNT - The number of geth nodes that you would like to spawn
#     ROOT_DIR - The designated root directory for the data generated by the geth nodes
#     
# How it works:
#
#  - When a node is spawned, a new account is created for it
#  - The nodes launch on ports (30300, 30301, ... , 3030N)
#  - Then nodes launch on rpc ports (8100, 8101, ... , 810N)
#  - The nodes use a nodes corresponding node url to connect
#  - The nodes do not mine by default but can be set to do so
#
# How to stop:
#
#  - To kill, `killall geth`
#   

## Set the necessary command-line arguments

if [ -z "$1" ] || [ -z "$2" ]
  then
    echo "Please set the number of nodes that you would like to spin up and a root directory for storing your data"
    echo "bash spawnGethNodes.sh < ROOT_DIR > < COUNT >" 
    exit 1
fi

## Set the root directory for the nodes to store data

ROOT_DIR=$1
COUNT=$2
CURRENT_DIR=$ROOT_DIR
mkdir -p $CURRENT_DIR/data
mkdir -p $CURRENT_DIR/log

if [ ! -f "$CURRENT_DIR/nodes"  ]; then

  echo "[" >> $CURRENT_DIR/nodes

  for (( i = 0; i < COUNT; ++i )); do

    ID=`printf "%02d" $i`

    if [ ! $ip_addr="" ]; then
      ip_addr="[::]"
    fi

    echo "Getting enode for instance $ID ($i/$COUNT)"

    ETH="$GETH --datadir $CURRENT_DIR/data/$ID --port 303$ID"
    COMMAND="$eth js <(echo 'console.log(admin.nodeInfo.enode); exit();') "

    bash -c "$COMMAND" 2>/dev/null | grep enode | perl -pe "s/\[\:\:\]/$ip_addr/g" | perl -pe "s/^/\"/; s/\s*$/\"/;" | tee >> $CURRENT_DIR/nodes
    if (( i < COUNT - 1 )); then
      echo "," >> $CURRENT_DIR/nodes
    fi
  done
  echo "]" >> $CURRENT_DIR/nodes
fi

for (( i = 0; i < COUNT; ++i )); do
  ID=`printf "%02d" $i`
  mkdir -p $CURRENT_DIR/data/$ID

  echo "launching node $i/$COUNT ---> tail-f $dir/log/$ID.log"
  GETH=$GETH bash ./runGethNode.sh $CURRENT_DIR $ID $*
done